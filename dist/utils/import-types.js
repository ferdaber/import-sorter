'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
const isImportDeclaration = exports.isImportDeclaration = node => node.type === 'ImportDeclaration';
const getImports = exports.getImports = nodeArray => nodeArray.filter(isImportDeclaration);

const isSpecifiedImport = exports.isSpecifiedImport = node => isImportDeclaration(node) && node.specifiers.length;
const isNamespaceImport = exports.isNamespaceImport = node => isSpecifiedImport(node) && node.specifiers.length === 1 && node.specifiers[0].type === 'ImportNamespaceSpecifier';
const isDefaultImport = exports.isDefaultImport = node => isSpecifiedImport(node) && node.specifiers.length === 1 && node.specifiers[0].type === 'ImportDefaultSpecifier';
const isDestructuredImport = exports.isDestructuredImport = node => isSpecifiedImport(node) && node.specifiers.every(s => s.type === 'ImportSpecifier');
const isDestructuredMultiImport = exports.isDestructuredMultiImport = node => isDestructuredImport(node) && node.specifiers.length > 1;
const isDestructuredSingleImport = exports.isDestructuredSingleImport = node => isDestructuredImport(node) && node.specifiers.length === 1;
const isUnboundImport = exports.isUnboundImport = node => !isSpecifiedImport(node);

const categorizers = {
  namespace: isNamespaceImport,
  default: isDefaultImport,
  destructured: isDestructuredImport,
  'destructured-single': isDestructuredSingleImport,
  'destructured-multi': isDestructuredMultiImport,
  unbound: isUnboundImport
};
const categorizeImports = exports.categorizeImports = nodeArray => {
  const categories = {};
  Object.keys(categorizers).forEach(k => categories[k] = nodeArray.filter(categorizers[k]));
  return categories;
};

const alphaSorter = keyGetter => (a, b) => keyGetter(a).toLowerCase() < keyGetter(b).toLowerCase() ? -1 : keyGetter(a).toLowerCase() > keyGetter(b).toLowerCase() ? 1 : 0;
const sortNamespaceImport = exports.sortNamespaceImport = alphaSorter(n => n.specifiers[0].local.name);
const sortDefaultImport = exports.sortDefaultImport = sortNamespaceImport;
const sortDestructuredSingleImport = exports.sortDestructuredSingleImport = alphaSorter(n => n.specifiers[0].imported.name);
const sortDestructuredMultiImport = exports.sortDestructuredMultiImport = alphaSorter(n => n.specifiers.sort(alphaSorter(s => s.imported.name))[0].imported.name);
const sortDestructuredImport = exports.sortDestructuredImport = sortDestructuredMultiImport;
const sortUnboundImport = exports.sortUnboundImport = alphaSorter(n => n.source.value);

const sorters = {
  namespace: sortNamespaceImport,
  default: sortDefaultImport,
  destructured: sortDestructuredImport,
  'destructured-single': sortDestructuredSingleImport,
  'destructured-multi': sortDestructuredImport,
  unbound: sortUnboundImport
};

const defaultImportSort = ['default', 'destructured', 'namespace', 'unbound'];

const importSorter = exports.importSorter = (group, importTypesArray = defaultImportSort) => nodeArray => {
  const categories = categorizeImports(nodeArray);
  Object.keys(categories).forEach(k => categories[k].sort(sorters[k]));
  return importTypesArray.reduce((acc, type) => group ? acc.concat(categories[type], ' ') : acc.concat(categories[type]), []);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9pbXBvcnQtdHlwZXMuanMiXSwibmFtZXMiOlsiaXNJbXBvcnREZWNsYXJhdGlvbiIsIm5vZGUiLCJ0eXBlIiwiZ2V0SW1wb3J0cyIsIm5vZGVBcnJheSIsImZpbHRlciIsImlzU3BlY2lmaWVkSW1wb3J0Iiwic3BlY2lmaWVycyIsImxlbmd0aCIsImlzTmFtZXNwYWNlSW1wb3J0IiwiaXNEZWZhdWx0SW1wb3J0IiwiaXNEZXN0cnVjdHVyZWRJbXBvcnQiLCJldmVyeSIsInMiLCJpc0Rlc3RydWN0dXJlZE11bHRpSW1wb3J0IiwiaXNEZXN0cnVjdHVyZWRTaW5nbGVJbXBvcnQiLCJpc1VuYm91bmRJbXBvcnQiLCJjYXRlZ29yaXplcnMiLCJuYW1lc3BhY2UiLCJkZWZhdWx0IiwiZGVzdHJ1Y3R1cmVkIiwidW5ib3VuZCIsImNhdGVnb3JpemVJbXBvcnRzIiwiY2F0ZWdvcmllcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiayIsImFscGhhU29ydGVyIiwia2V5R2V0dGVyIiwiYSIsImIiLCJ0b0xvd2VyQ2FzZSIsInNvcnROYW1lc3BhY2VJbXBvcnQiLCJuIiwibG9jYWwiLCJuYW1lIiwic29ydERlZmF1bHRJbXBvcnQiLCJzb3J0RGVzdHJ1Y3R1cmVkU2luZ2xlSW1wb3J0IiwiaW1wb3J0ZWQiLCJzb3J0RGVzdHJ1Y3R1cmVkTXVsdGlJbXBvcnQiLCJzb3J0Iiwic29ydERlc3RydWN0dXJlZEltcG9ydCIsInNvcnRVbmJvdW5kSW1wb3J0Iiwic291cmNlIiwidmFsdWUiLCJzb3J0ZXJzIiwiZGVmYXVsdEltcG9ydFNvcnQiLCJpbXBvcnRTb3J0ZXIiLCJncm91cCIsImltcG9ydFR5cGVzQXJyYXkiLCJyZWR1Y2UiLCJhY2MiLCJjb25jYXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUEsb0RBQXNCQyxRQUFRQSxLQUFLQyxJQUFMLEtBQWMsbUJBQWxEO0FBQ0EsTUFBTUMsa0NBQWFDLGFBQWFBLFVBQVVDLE1BQVYs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LENBQWhCOztBQVNBLE1BQU1JLG9CQUFvQixDQUN4QixTQUR3QixFQUV4QixjQUZ3QixFQUd4QixXQUh3QixFQUl4QixTQUp3QixDQUExQjs7QUFPTyxNQUFNQyxzQ0FBZSxDQUFDQyxLQUFELEVBQVFDLG1CQUFtQkgsaUJBQTNCLEtBQWlEM0MsYUFBYTtBQUN4RixRQUFNbUIsYUFBYUQsa0JBQWtCbEIsU0FBbEIsQ0FBbkI7QUFDQW9CLFNBQU9DLElBQVAsQ0FBWUYsVUFBWixFQUF3QkcsT0FBeEIsQ0FBZ0NDLEtBQUtKLFdBQVdJLENBQVgsRUFBY2MsSUFBZCxDQUFtQkssUUFBUW5CLENBQVIsQ0FBbkIsQ0FBckM7QUFDQSxTQUFPdUIsaUJBQWlCQyxNQUFqQixDQUNMLENBQUNDLEdBQUQsRUFBTWxELElBQU4sS0FBZStDLFFBQ1hHLElBQUlDLE1BQUosQ0FBVzlCLFdBQVdyQixJQUFYLENBQVgsRUFBNkIsR0FBN0IsQ0FEVyxHQUVYa0QsSUFBSUMsTUFBSixDQUFXOUIsV0FBV3JCLElBQVgsQ0FBWCxDQUhDLEVBRzZCLEVBSDdCLENBQVA7QUFLRCxDQVJNIiwiZmlsZSI6ImltcG9ydC10eXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc0ltcG9ydERlY2xhcmF0aW9uID0gbm9kZSA9PiBub2RlLnR5cGUgPT09ICdJbXBvcnREZWNsYXJhdGlvbidcclxuZXhwb3J0IGNvbnN0IGdldEltcG9ydHMgPSBub2RlQXJyYXkgPT4gbm9kZUFycmF5LmZpbHRlcihpc0ltcG9ydERlY2xhcmF0aW9uKVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzU3BlY2lmaWVkSW1wb3J0ID0gbm9kZSA9PiBpc0ltcG9ydERlY2xhcmF0aW9uKG5vZGUpICYmIG5vZGUuc3BlY2lmaWVycy5sZW5ndGhcclxuZXhwb3J0IGNvbnN0IGlzTmFtZXNwYWNlSW1wb3J0ID0gbm9kZSA9PlxyXG4gIGlzU3BlY2lmaWVkSW1wb3J0KG5vZGUpICYmIG5vZGUuc3BlY2lmaWVycy5sZW5ndGggPT09IDEgJiYgbm9kZS5zcGVjaWZpZXJzWzBdLnR5cGUgPT09ICdJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXInXHJcbmV4cG9ydCBjb25zdCBpc0RlZmF1bHRJbXBvcnQgPSBub2RlID0+XHJcbiAgaXNTcGVjaWZpZWRJbXBvcnQobm9kZSkgJiYgbm9kZS5zcGVjaWZpZXJzLmxlbmd0aCA9PT0gMSAmJiBub2RlLnNwZWNpZmllcnNbMF0udHlwZSA9PT0gJ0ltcG9ydERlZmF1bHRTcGVjaWZpZXInXHJcbmV4cG9ydCBjb25zdCBpc0Rlc3RydWN0dXJlZEltcG9ydCA9IG5vZGUgPT5cclxuICBpc1NwZWNpZmllZEltcG9ydChub2RlKSAmJiBub2RlLnNwZWNpZmllcnMuZXZlcnkocyA9PiBzLnR5cGUgPT09ICdJbXBvcnRTcGVjaWZpZXInKVxyXG5leHBvcnQgY29uc3QgaXNEZXN0cnVjdHVyZWRNdWx0aUltcG9ydCA9IG5vZGUgPT4gaXNEZXN0cnVjdHVyZWRJbXBvcnQobm9kZSkgJiYgbm9kZS5zcGVjaWZpZXJzLmxlbmd0aCA+IDFcclxuZXhwb3J0IGNvbnN0IGlzRGVzdHJ1Y3R1cmVkU2luZ2xlSW1wb3J0ID0gbm9kZSA9PiBpc0Rlc3RydWN0dXJlZEltcG9ydChub2RlKSAmJiBub2RlLnNwZWNpZmllcnMubGVuZ3RoID09PSAxXHJcbmV4cG9ydCBjb25zdCBpc1VuYm91bmRJbXBvcnQgPSBub2RlID0+ICFpc1NwZWNpZmllZEltcG9ydChub2RlKVxyXG5cclxuY29uc3QgY2F0ZWdvcml6ZXJzID0ge1xyXG4gIG5hbWVzcGFjZTogaXNOYW1lc3BhY2VJbXBvcnQsXHJcbiAgZGVmYXVsdDogaXNEZWZhdWx0SW1wb3J0LFxyXG4gIGRlc3RydWN0dXJlZDogaXNEZXN0cnVjdHVyZWRJbXBvcnQsXHJcbiAgJ2Rlc3RydWN0dXJlZC1zaW5nbGUnOiBpc0Rlc3RydWN0dXJlZFNpbmdsZUltcG9ydCxcclxuICAnZGVzdHJ1Y3R1cmVkLW11bHRpJzogaXNEZXN0cnVjdHVyZWRNdWx0aUltcG9ydCxcclxuICB1bmJvdW5kOiBpc1VuYm91bmRJbXBvcnRcclxufVxyXG5leHBvcnQgY29uc3QgY2F0ZWdvcml6ZUltcG9ydHMgPSBub2RlQXJyYXkgPT4ge1xyXG4gIGNvbnN0IGNhdGVnb3JpZXMgPSB7fVxyXG4gIE9iamVjdC5rZXlzKGNhdGVnb3JpemVycykuZm9yRWFjaChrID0+IGNhdGVnb3JpZXNba10gPSBub2RlQXJyYXkuZmlsdGVyKGNhdGVnb3JpemVyc1trXSkpXHJcbiAgcmV0dXJuIGNhdGVnb3JpZXNcclxufVxyXG5cclxuY29uc3QgYWxwaGFTb3J0ZXIgPSBrZXlHZXR0ZXIgPT4gKGEsIGIpID0+XHJcbiAga2V5R2V0dGVyKGEpLnRvTG93ZXJDYXNlKCkgPCBrZXlHZXR0ZXIoYikudG9Mb3dlckNhc2UoKVxyXG4gICAgPyAtMVxyXG4gICAgOiBrZXlHZXR0ZXIoYSkudG9Mb3dlckNhc2UoKSA+IGtleUdldHRlcihiKS50b0xvd2VyQ2FzZSgpID8gMSA6IDBcclxuZXhwb3J0IGNvbnN0IHNvcnROYW1lc3BhY2VJbXBvcnQgPSBhbHBoYVNvcnRlcihuID0+IG4uc3BlY2lmaWVyc1swXS5sb2NhbC5uYW1lKVxyXG5leHBvcnQgY29uc3Qgc29ydERlZmF1bHRJbXBvcnQgPSBzb3J0TmFtZXNwYWNlSW1wb3J0XHJcbmV4cG9ydCBjb25zdCBzb3J0RGVzdHJ1Y3R1cmVkU2luZ2xlSW1wb3J0ID0gYWxwaGFTb3J0ZXIobiA9PiBuLnNwZWNpZmllcnNbMF0uaW1wb3J0ZWQubmFtZSlcclxuZXhwb3J0IGNvbnN0IHNvcnREZXN0cnVjdHVyZWRNdWx0aUltcG9ydCA9IGFscGhhU29ydGVyKFxyXG4gIG4gPT4gbi5zcGVjaWZpZXJzLnNvcnQoYWxwaGFTb3J0ZXIocyA9PiBzLmltcG9ydGVkLm5hbWUpKVswXS5pbXBvcnRlZC5uYW1lXHJcbilcclxuZXhwb3J0IGNvbnN0IHNvcnREZXN0cnVjdHVyZWRJbXBvcnQgPSBzb3J0RGVzdHJ1Y3R1cmVkTXVsdGlJbXBvcnRcclxuZXhwb3J0IGNvbnN0IHNvcnRVbmJvdW5kSW1wb3J0ID0gYWxwaGFTb3J0ZXIobiA9PiBuLnNvdXJjZS52YWx1ZSlcclxuXHJcbmNvbnN0IHNvcnRlcnMgPSB7XHJcbiAgbmFtZXNwYWNlOiBzb3J0TmFtZXNwYWNlSW1wb3J0LFxyXG4gIGRlZmF1bHQ6IHNvcnREZWZhdWx0SW1wb3J0LFxyXG4gIGRlc3RydWN0dXJlZDogc29ydERlc3RydWN0dXJlZEltcG9ydCxcclxuICAnZGVzdHJ1Y3R1cmVkLXNpbmdsZSc6IHNvcnREZXN0cnVjdHVyZWRTaW5nbGVJbXBvcnQsXHJcbiAgJ2Rlc3RydWN0dXJlZC1tdWx0aSc6IHNvcnREZXN0cnVjdHVyZWRJbXBvcnQsXHJcbiAgdW5ib3VuZDogc29ydFVuYm91bmRJbXBvcnRcclxufVxyXG5cclxuY29uc3QgZGVmYXVsdEltcG9ydFNvcnQgPSBbXHJcbiAgJ2RlZmF1bHQnLFxyXG4gICdkZXN0cnVjdHVyZWQnLFxyXG4gICduYW1lc3BhY2UnLFxyXG4gICd1bmJvdW5kJ1xyXG5dXHJcblxyXG5leHBvcnQgY29uc3QgaW1wb3J0U29ydGVyID0gKGdyb3VwLCBpbXBvcnRUeXBlc0FycmF5ID0gZGVmYXVsdEltcG9ydFNvcnQpID0+IG5vZGVBcnJheSA9PiB7XHJcbiAgY29uc3QgY2F0ZWdvcmllcyA9IGNhdGVnb3JpemVJbXBvcnRzKG5vZGVBcnJheSlcclxuICBPYmplY3Qua2V5cyhjYXRlZ29yaWVzKS5mb3JFYWNoKGsgPT4gY2F0ZWdvcmllc1trXS5zb3J0KHNvcnRlcnNba10pKVxyXG4gIHJldHVybiBpbXBvcnRUeXBlc0FycmF5LnJlZHVjZShcclxuICAgIChhY2MsIHR5cGUpID0+IGdyb3VwXHJcbiAgICAgID8gYWNjLmNvbmNhdChjYXRlZ29yaWVzW3R5cGVdLCAnICcpXHJcbiAgICAgIDogYWNjLmNvbmNhdChjYXRlZ29yaWVzW3R5cGVdKSwgW11cclxuICApXHJcbn1cclxuIl19